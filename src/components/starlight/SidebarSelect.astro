---
export interface Props {}
---

<script>
	import {
		type TransitionBeforeSwapEvent,
		isTransitionBeforeSwapEvent,
		TRANSITION_BEFORE_SWAP,
	} from 'astro:transitions/client';
	import {
		sidebarEntry,
		clearCurrentPageMarker,
		openCategory,
		updateCurrentPageMarker,
	} from 'astro-vtbot/components/starlight/utils';

	const marker = init();
	const defaultBehavior = (e: TransitionBeforeSwapEvent) => {
		clearCurrentPageMarker();
		updateCurrentPageMarker(e.to);
		openCategory(e.to);
	};

	async function moveMarker(e: TransitionBeforeSwapEvent) {
		openCategory(e.to);

		const current = sidebarEntry(e.from);
		const next = sidebarEntry(e.to);
		/* don't animate on mobile */
		if (!current || !next || window.getComputedStyle(current).visibility !== 'visible') {
			defaultBehavior(e);
			return;
		}

		const nextRect = next.getBoundingClientRect();
		const currentRect = current.getBoundingClientRect();
		marker.style.left = nextRect.left + 'px';
		marker.style.top = currentRect.top + 'px';
		document.body.appendChild(marker);

		// todo: make this customizable and add support for prefers-reduced-motion setting
		const duration = 1500;
		const to1 = setTimeout(clearCurrentPageMarker, duration / 3);
		const to2 = setTimeout(() => next.setAttribute('aria-current', 'page'), (duration * 2) / 3);
		const animation = marker.animate(
			{
				width: [
					`${currentRect.width}px`,
					`${currentRect.width}px`,
					'16px',
					'16px',
					`${nextRect.width}px`,
					`${nextRect.width}px`,
				],
				height: [
					`${currentRect.height}px`,
					`${currentRect.height}px`,
					`${currentRect.height}px`,
					`${nextRect.height}px`,
					`${nextRect.height}px`,
					`${nextRect.height}px`,
				],
				left: [
					`${currentRect.left}px`,
					`${currentRect.left}px`,
					`0px`,
					`0px`,
					`${nextRect.left}px`,
					`${nextRect.left}px`,
				],
				top: [
					`${currentRect.top}px`,
					`${currentRect.top}px`,
					`${currentRect.top}px`,
					`${nextRect.top}px`,
					`${nextRect.top}px`,
					`${nextRect.top}px`,
				],
				opacity: [0, 0.5, 0.5, 0.5, 0.5, 0],
				easing: ['ease-in-out'],
			},
			duration
		);
		e.viewTransition.finished.finally(() => {
			animation.cancel();
			clearTimeout(to1);
			clearTimeout(to2);
			defaultBehavior(e);
		});
	}

	function init() {
		const marker = document.createElement('span');
		marker.style.position = 'fixed';
		marker.style.zIndex = '10';
		marker.style.borderRadius = '9px';
		marker.style.backgroundColor = 'var(--sl-color-accent)';
		marker.style.opacity = '0';
		document.body.appendChild(marker);

		document.addEventListener(TRANSITION_BEFORE_SWAP, (e) => {
			if (isTransitionBeforeSwapEvent(e)) {
				e.viewTransition.ready.then(() => {
					moveMarker(e);
				});
			}
		});
		return marker;
	}
</script>
<style is:global>
	@keyframes noop {}
:root[data-astro-transition-fallback="new"] {
	animation: noop 0s 1.5s;
}
</style>
