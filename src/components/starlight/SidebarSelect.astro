---
export interface Props {}
---

<script>
	import {
		type TransitionBeforeSwapEvent,
		isTransitionBeforeSwapEvent,
		TRANSITION_BEFORE_SWAP,
	} from 'astro:transitions/client';
	import { sidebarEntry } from 'astro-vtbot/components/starlight/utils';

	const marker = init();

	function moveMarker(e: TransitionBeforeSwapEvent) {
		const current = sidebarEntry(e.from);
		if (!current || getComputedStyle(current).visibility === 'hidden') return;
		let next = sidebarEntry(e.to);
		if (!next) return;

		const nextRect = next.getBoundingClientRect();
		const currentRect = current.getBoundingClientRect();
		marker.style.left = nextRect.left + 'px';
		marker.style.top = currentRect.top + 'px';
		document.body.appendChild(marker);

		marker
			.animate(
				{
					width: [
						`${currentRect.width}px`,
						`${currentRect.width}px`,
						'16px',
						'16px',
						`${nextRect.width}px`,
						`${nextRect.width}px`,
					],
					height: [
						`${currentRect.height}px`,
						`${currentRect.height}px`,
						`${currentRect.height}px`,
						`${nextRect.height}px`,
						`${nextRect.height}px`,
						`${nextRect.height}px`,
					],
					left: [
						`${currentRect.left}px`,
						`${currentRect.left}px`,
						`0px`,
						`0px`,
						`${nextRect.left}px`,
						`${nextRect.left}px`,
					],
					top: [
						`${currentRect.top}px`,
						`${currentRect.top}px`,
						`${currentRect.top}px`,
						`${nextRect.top}px`,
						`${nextRect.top}px`,
						`${nextRect.top}px`,
					],
					opacity: [0, 0.5, 0.5, 0.5, 0.5, 0],
					easing: ['ease-in-out'],
				},
				1500
			)
			.finished.then(() => {
				marker.style.top = nextRect.top + 'px';
			});
	}

	function init() {
		const marker = document.createElement('span');
		const current = document.querySelector(`.sidebar-pane [aria-current="page"]`);
		const currentRect = (current as HTMLElement).parentElement!.getBoundingClientRect();
		marker.style.position = 'fixed';
		marker.style.zIndex = '10';
		marker.style.top = currentRect.top + 'px';
		marker.style.height = '28px';
		marker.style.width = '16px';
		marker.style.borderRadius = '9px';
		marker.style.backgroundColor = 'var(--sl-color-accent)';
		marker.style.opacity = '0';
		document.body.appendChild(marker);

		document.addEventListener(TRANSITION_BEFORE_SWAP, (e) => {
			if (isTransitionBeforeSwapEvent(e)) {
				const originalSwap = e.swap;
				e.swap = () => {
					originalSwap();
					moveMarker(e);
				};
			}
		});
		return marker;
	}
</script>
